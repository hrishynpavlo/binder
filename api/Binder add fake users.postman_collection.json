{
	"info": {
		"_postman_id": "4d791714-2b10-4258-b282-cc35a1c59060",
		"name": "Binder add fake users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2514459"
	},
	"item": [
		{
			"name": "kafka-connect",
			"item": [
				{
					"name": "Create postgresql connector",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"binder-postgres-connector\",\r\n    \"config\": {\r\n        \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\r\n        \"database.hostname\": \"binder_postgresql\",\r\n        \"database.port\": \"5432\",\r\n        \"database.user\": \"postgres\",\r\n        \"database.password\": \"postgres\",\r\n        \"database.dbname\": \"binder_all\",\r\n        \"database.server.name\": \"binder_db_server\",\r\n        \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\r\n        \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\r\n        \"key.converter.schemas.enable\": \"true\",\r\n        \"value.converter.schemas.enable\": \"true\",\r\n        \"topic.prefix\": \"binder-app\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "http://localhost:8083/connectors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"connectors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create elasticsearch sink",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"binder-elasticsearch-sink\",\r\n    \"config\": {\r\n        \"connector.class\": \"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector\",\r\n        \"tasks.max\": \"1\",\r\n        \"topics.regex\": \"^binder-app\\\\.public\\\\..*$\",\r\n        \"key.ignore\": \"true\",\r\n        \"type.name\": \"_doc\",\r\n        \"name\": \"binder-elasticsearch-sink\",\r\n        \"connection.url\": \"http://elasticsearch:9200\",\r\n        \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\r\n        \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\r\n        \"key.converter.schemas.enable\": \"true\",\r\n        \"value.converter.schemas.enable\": \"true\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8083/connectors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"connectors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get connectors and sinks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8083/connectors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"connectors",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstNames = [\r",
							"  \"Emma\", \"Olivia\", \"Ava\", \"Isabella\", \"Sophia\", \r",
							"  \"Mia\", \"Charlotte\", \"Amelia\", \"Harper\", \"Evelyn\",\r",
							"  \"Abigail\", \"Emily\", \"Elizabeth\", \"Sofia\", \"Avery\",\r",
							"  \"Ella\", \"Scarlett\", \"Grace\", \"Lily\", \"Chloe\",\r",
							"  \"Victoria\", \"Aubrey\", \"Zoe\", \"Natalie\", \"Addison\",\r",
							"  \"Lillian\", \"Brooklyn\", \"Lucy\", \"Hannah\", \"Layla\"\r",
							"];\r",
							"\r",
							"const lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Taylor\",\r",
							"  \"Miller\", \"Wilson\", \"Moore\", \"Anderson\", \"Thomas\",\r",
							"  \"Jackson\", \"White\", \"Harris\", \"Martin\", \"Thompson\",\r",
							"  \"Garcia\", \"Martinez\", \"Robinson\", \"Clark\", \"Rodriguez\",\r",
							"  \"Lewis\", \"Lee\", \"Walker\", \"Hall\", \"Allen\",\r",
							"  \"Young\", \"Hernandez\", \"King\", \"Wright\", \"Lopez\"\r",
							"];\r",
							"\r",
							"const nickNames = [ \"Sweety\", \"Crazy\", \"Hot\", \"Incredible\", \"Wild\", \"Spicy\", \"Funky\", \"Trendy\" ];\r",
							"\r",
							"const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
							"const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
							"const nickName = nickNames[Math.floor(Math.random() * nickNames.length)];\r",
							"\r",
							"function getRandomBirthDate() {\r",
							"  const minAge = 17;\r",
							"  const maxAge = 40;\r",
							"\r",
							"  const currentDate = new Date();\r",
							"\r",
							"  const minYear = currentDate.getFullYear() - maxAge;\r",
							"  const maxYear = currentDate.getFullYear() - minAge;\r",
							"\r",
							"  const randomYear = Math.floor(Math.random() * (maxYear - minYear + 1)) + minYear;\r",
							"\r",
							"  const randomMonth = Math.floor(Math.random() * 12);\r",
							"\r",
							"  const randomDay = Math.floor(Math.random() * (new Date(randomYear, randomMonth + 1, 0).getDate())) + 1;\r",
							"\r",
							"  return new Date(randomYear, randomMonth, randomDay).toISOString().slice(0, 10);\r",
							"}\r",
							"\r",
							"function getRandomLocation() {\r",
							"    const states = {\r",
							"        \"New York\": {\r",
							"            lat: { min: 40.477399, max: 45.01585 },\r",
							"            lng: { min: -79.762590, max: -71.852345 }\r",
							"        },\r",
							"        \"California\": {\r",
							"            lat: { min: 32.5121, max: 42.0126 },\r",
							"            lng: { min: -124.6509, max: -114.1312 }\r",
							"        },\r",
							"        \"Washington\": {\r",
							"            lat: { min: 45.543541, max: 49.002494 },\r",
							"            lng: { min: -124.848974, max: -116.916031 }\r",
							"        }\r",
							"    };\r",
							"\r",
							"    const stateNames = Object.keys(states);\r",
							"    const randomStateName = stateNames[Math.floor(Math.random() * stateNames.length)];\r",
							"    const randomState = states[randomStateName];\r",
							"\r",
							"    const lat = Math.random() * (randomState.lat.max - randomState.lat.min) + randomState.lat.min;\r",
							"    const lng = Math.random() * (randomState.lng.max - randomState.lng.min) + randomState.lng.min;\r",
							"\r",
							"    return { latitude: lat, longitude: lng};\r",
							"}\r",
							"\r",
							"const dateOfBirth = getRandomBirthDate();\r",
							"const { latitude, longitude } = getRandomLocation();\r",
							"\r",
							"pm.variables.set(\"firstName\", firstName);\r",
							"pm.variables.set(\"lastName\", lastName);\r",
							"pm.variables.set(\"nickName\", nickName);\r",
							"pm.variables.set(\"dateOfBirth\", dateOfBirth);\r",
							"pm.variables.set(\"latitude\", latitude);\r",
							"pm.variables.set(\"longitude\", longitude);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"userId\", response.Id);\r",
							"\r",
							"let index = Number(pm.collectionVariables.get(\"index\"));\r",
							"++index;\r",
							"pm.collectionVariables.set(\"index\", index);\r",
							"\r",
							"const cookie = pm.response.headers.get('Set-Cookie');\r",
							"\r",
							"const str = cookie.split('; ');\r",
							"const result = {};\r",
							"for (let i in str) {\r",
							"    const cur = str[i].split('=');\r",
							"    result[cur[0]] = cur[1];\r",
							"}\r",
							"\r",
							"pm.collectionVariables.set(\"jwt\", result.binder_jwt);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\": \"{{firstName}}\",\r\n    \"LastName\": \"{{lastName}}\",\r\n    \"Password\": \"qwertyui123\",\r\n    \"DisplayName\": \"{{nickName}} {{firstName}}\",\r\n    \"Country\": \"USA\",\r\n    \"Email\": \"example{{index}}@example.com\",\r\n    \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n    \"Latitude\": {{latitude}},\r\n    \"Longitude\": {{longitude}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{binder_api_host}}/api/user",
					"protocol": "http",
					"host": [
						"{{binder_api_host}}"
					],
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\": \"example{{index}}@example.com\",\r\n    \"Password\": \"qwertyui123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{binder_api_host}}/api/login",
					"protocol": "http",
					"host": [
						"{{binder_api_host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add interests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomInterests() {\r",
							"    var allInterests = ['Travel', 'Music', 'Books', 'Movies', 'Sport', 'Adventure', 'Pets', 'Animals', 'Food', 'Wine', 'Coffee', 'Drink', 'Walks', 'Hiking', 'Dancing', 'Gym', 'Tattoo'];\r",
							"  var number = Math.floor(Math.random() * 5) + 3;\r",
							"\r",
							"  var shuffled = allInterests.slice(0);\r",
							"  for (var i = shuffled.length - 1; i > 0; i--) {\r",
							"      var j = Math.floor(Math.random() * (i + 1));\r",
							"      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]; \r",
							"  }\r",
							"\r",
							"  return shuffled.slice(0, number);\r",
							"}\r",
							"\r",
							"let interests = getRandomInterests();\r",
							"console.log(\"interests:\", interests)\r",
							"pm.environment.set(\"interests\", JSON.stringify(interests));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"UserId\": {{userId}},\r\n    \"Interests\": {{interests}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{binder_api_host}}/api/user-interests",
					"protocol": "http",
					"host": [
						"{{binder_api_host}}"
					],
					"path": [
						"api",
						"user-interests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add photos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomPhoto(){\r",
							"    var allPhotos = [ \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80\", \"https://images.pexels.com/photos/1391498/pexels-photo-1391498.jpeg\",\r",
							"    \"https://images.unsplash.com/photo-1509967419530-da38b4704bc6\", \"https://images.unsplash.com/photo-1531746020798-e6953c6e8e04\",\r",
							"    \"https://images.unsplash.com/photo-1579610520129-963c74781ffb\", \"https://images.unsplash.com/photo-1580566059042-9b5771d31fcb\",\r",
							"    \"https://images.unsplash.com/photo-1567532939604-b6b5b0db2604\", \"https://images.unsplash.com/photo-1605691408200-534bee0d52c1\",\r",
							"    \"https://images.unsplash.com/photo-1534528741775-53994a69daeb\", \"https://images.unsplash.com/photo-1616002411355-49593fd89721\",\r",
							"    \"https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e\", \"https://plus.unsplash.com/premium_photo-1670006474124-a23db3cde1b9\",\r",
							"    \"https://images.unsplash.com/photo-1525786210598-d527194d3e9a\", \"https://images.unsplash.com/photo-1554151228-14d9def656e4\",\r",
							"    \"https://images.unsplash.com/photo-1604072366595-e75dc92d6bdc\", \"https://images.unsplash.com/photo-1610642434250-392436bd9fba\" ];\r",
							"\r",
							"    const randomIndex = Math.floor(Math.random() * 15);\r",
							"\r",
							"    return [  allPhotos[randomIndex] ];\r",
							"}\r",
							"\r",
							"const randomPhoto = getRandomPhoto();\r",
							"pm.variables.set(\"photoUrls\", JSON.stringify(randomPhoto));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"UserId\": {{userId}},\r\n    \"PhotoUrls\": {{photoUrls}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{binder_api_host}}/api/user-photos",
					"protocol": "http",
					"host": [
						"{{binder_api_host}}"
					],
					"path": [
						"api",
						"user-photos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{binder_api_host}}/api/user/list",
					"protocol": "http",
					"host": [
						"{{binder_api_host}}"
					],
					"path": [
						"api",
						"user",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user feed",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{binder_api_host}}/api/user/35/feed",
					"protocol": "http",
					"host": [
						"{{binder_api_host}}"
					],
					"path": [
						"api",
						"user",
						"35",
						"feed"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "index",
			"value": "0",
			"type": "string"
		},
		{
			"key": "jwt",
			"value": "",
			"type": "string"
		}
	]
}